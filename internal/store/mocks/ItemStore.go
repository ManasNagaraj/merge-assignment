// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/merge/shopping-card/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// ItemStore is an autogenerated mock type for the ItemStore type
type ItemStore struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: ctx
func (_m *ItemStore) FindAll(ctx context.Context) ([]*model.Item, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*model.Item, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Item); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, ID
func (_m *ItemStore) FindByID(ctx context.Context, ID string) (*model.Item, error) {
	ret := _m.Called(ctx, ID)

	var r0 *model.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.Item, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Item); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, u
func (_m *ItemStore) Save(ctx context.Context, u *model.Item) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Item) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewItemStore creates a new instance of ItemStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewItemStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *ItemStore {
	mock := &ItemStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
