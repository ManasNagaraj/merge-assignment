// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/merge/shopping-card/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// AccessTokenStore is an autogenerated mock type for the AccessTokenStore type
type AccessTokenStore struct {
	mock.Mock
}

// FindByAccessToken provides a mock function with given fields: ctx, userId
func (_m *AccessTokenStore) FindByAccessToken(ctx context.Context, userId string) (*model.AccessToken, error) {
	ret := _m.Called(ctx, userId)

	var r0 *model.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AccessToken, error)); ok {
		return rf(ctx, userId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AccessToken); ok {
		r0 = rf(ctx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: ctx, ID
func (_m *AccessTokenStore) FindByUserID(ctx context.Context, ID string) (*model.AccessToken, error) {
	ret := _m.Called(ctx, ID)

	var r0 *model.AccessToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*model.AccessToken, error)); ok {
		return rf(ctx, ID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.AccessToken); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AccessToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, u
func (_m *AccessTokenStore) Save(ctx context.Context, u *model.AccessToken) error {
	ret := _m.Called(ctx, u)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.AccessToken) error); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAccessTokenStore creates a new instance of AccessTokenStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAccessTokenStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *AccessTokenStore {
	mock := &AccessTokenStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
