// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// AdminWorker is an autogenerated mock type for the AdminWorker type
type AdminWorker struct {
	mock.Mock
}

// AddItem provides a mock function with given fields: gctx, name, desc, quantity, price
func (_m *AdminWorker) AddItem(gctx *gin.Context, name string, desc string, quantity uint, price uint) (interface{}, error) {
	ret := _m.Called(gctx, name, desc, quantity, price)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, string, uint, uint) (interface{}, error)); ok {
		return rf(gctx, name, desc, quantity, price)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string, string, uint, uint) interface{}); ok {
		r0 = rf(gctx, name, desc, quantity, price)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string, string, uint, uint) error); ok {
		r1 = rf(gctx, name, desc, quantity, price)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableUser provides a mock function with given fields: gctx, userID, message
func (_m *AdminWorker) DisableUser(gctx *gin.Context, userID int, message string) (interface{}, error) {
	ret := _m.Called(gctx, userID, message)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, int, string) (interface{}, error)); ok {
		return rf(gctx, userID, message)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, int, string) interface{}); ok {
		r0 = rf(gctx, userID, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, int, string) error); ok {
		r1 = rf(gctx, userID, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAdminWorker creates a new instance of AdminWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAdminWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *AdminWorker {
	mock := &AdminWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
