// Code generated by mockery v2.32.4. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// AppWorker is an autogenerated mock type for the AppWorker type
type AppWorker struct {
	mock.Mock
}

// AddToCart provides a mock function with given fields: gctx, itemId, quantity
func (_m *AppWorker) AddToCart(gctx *gin.Context, itemId string, quantity uint) (interface{}, error) {
	ret := _m.Called(gctx, itemId, quantity)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, uint) (interface{}, error)); ok {
		return rf(gctx, itemId, quantity)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string, uint) interface{}); ok {
		r0 = rf(gctx, itemId, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string, uint) error); ok {
		r1 = rf(gctx, itemId, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllItems provides a mock function with given fields: gctx
func (_m *AppWorker) ListAllItems(gctx *gin.Context) (interface{}, error) {
	ret := _m.Called(gctx)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (interface{}, error)); ok {
		return rf(gctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) interface{}); ok {
		r0 = rf(gctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(gctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCart provides a mock function with given fields: gctx
func (_m *AppWorker) ListCart(gctx *gin.Context) (interface{}, error) {
	ret := _m.Called(gctx)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context) (interface{}, error)); ok {
		return rf(gctx)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context) interface{}); ok {
		r0 = rf(gctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = rf(gctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveItemFromCart provides a mock function with given fields: gctx, itemId, quantity
func (_m *AppWorker) RemoveItemFromCart(gctx *gin.Context, itemId string, quantity uint) (interface{}, error) {
	ret := _m.Called(gctx, itemId, quantity)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(*gin.Context, string, uint) (interface{}, error)); ok {
		return rf(gctx, itemId, quantity)
	}
	if rf, ok := ret.Get(0).(func(*gin.Context, string, uint) interface{}); ok {
		r0 = rf(gctx, itemId, quantity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(*gin.Context, string, uint) error); ok {
		r1 = rf(gctx, itemId, quantity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAppWorker creates a new instance of AppWorker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppWorker(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppWorker {
	mock := &AppWorker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
